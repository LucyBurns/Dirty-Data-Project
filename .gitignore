### Data Files###
*.csv
*.dat
*.efx
*.gbr
*.key
*.pps
*.ppt
*.pptx
*.sdf
*.tax2010
*.vcf
*.xlr
*.xls
*.xlsx
*.xml

### macOS ###
# General
.DS_Store
.AppleDouble
.LSOverride

# Icon must end with two \r
Icon


# Thumbnails
._*

# Files that might appear in the root of a volume
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
.com.apple.timemachine.donotpresent

# Directories potentially created on remote AFP share
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk

### R ###
# History files
.Rhistory
.Rapp.history

# Session Data files
.RData

# User-specific files
.Ruserdata

# Example code in package build process
*-Ex.R

# Output files from R CMD build
/*.tar.gz

# Output files from R CMD check
/*.Rcheck/

# RStudio files
.Rproj.user/

# produced vignettes
vignettes/*.html
vignettes/*.pdf

# OAuth2 token, see https://github.com/hadley/httr/releases/tag/v0.3
.httr-oauth

# knitr and R markdown default cache directories
*_cache/
/cache/

# Temporary files created by R markdown
*.utf8.md
*.knit.md

# R Environment Variables
.Renviron

### R.Bookdown Stack ###
# R package: bookdown caching files
/*_files/

### Windows ###
# Windows thumbnail cache files
Thumbs.db
Thumbs.db:encryptable
ehthumbs.db
ehthumbs_vista.db

# Dump file
*.stackdump

# Folder config file
[Dd]esktop.ini

# Recycle Bin used on file shares
$RECYCLE.BIN/

# Windows Installer files
*.cab
*.msi
*.msix
*.msm
*.msp

# Windows shortcuts
*.lnk
This .gitignore template will cover the files generated by RStudio, a range of common formats for data files and any system files generated by both MacOS and Windows. In future if you need to generate a similar template you can do so here.

2.3 here() function
Just a gentle reminder that you are using projects (.Rproj) and not single scripts, and so do not use the Set Working Directory command in RStudio to read in files/scripts. This is never a good idea because it is not self-contained and portable: if someone else on another machine tried to run your code, it wouldn’t work properly, unless (completely by chance), they happen to mimic your directory and file structure.

However there is one small tweak that’s needed when running scripts within folders. Say my cleaning file is in the folder data_cleaning_scripts and in this file, I read in a data file saved within raw_data. I may try the following

birds <- read_csv("raw_data/birds.csv")
I will get an error if I run this. This is a bit of quirk in R. When you are working in a .Rmd file, R sets your working directory to the folder that the .Rmd file lives in (in this case, it would be data_cleaning_scripts). However, if you are working in a script file (.R) it makes the working directory the top level of the project (and so the code above would have worked).

We will be working in .Rmd files, so we need a fix for this. Luckily there is a function here() found in the here package, which figures out the top-level of your current project. And so we can use the following code:

library(here)

#test where the top level of the project directory is
here::here()

#use this to set the path to the data file
birds <- read_csv(here("data/birds.csv"))
